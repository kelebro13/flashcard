/* tslint:disable:max-line-length */
const jsCore = [
    {
        id: 0,
        question: 'JavaScript, главные 4 характеристики',
        answer: '1. Прототипно-орентированный язык \n 2. Функциональный язык \n 3. Регистро-зависимый \n 4. Динамическая типизация (интерпретируемая) \n 5.1. Объектно-орентированный язык'
    },
    {
        id: 1,
        question: 'Что понимается под свойствами',
        answer: 'Методы объекта, а также элементы массива. Методы это свойства, только функции, например: свойсвтво "Hello".length, метод "Hello".toUpperCase()'
    },
    {
        id: 2,
        question: 'Что такое аксессоры',
        answer: 'Это синтаксическая форма для доступа к свойствам [] и "." Можно написать как user.name, так и user["name"]'
    },
    {
        id: 3,
        question: 'Какие примитивы есть в JS(5)',
        answer: '1. number \n 2. string \n 3. boolean \n 4. null \n 5. undefined'
    },
    {
        id: 4,
        question: 'Какие есть объекты в JS(не обертки)',
        answer: 'Object, Function, Date, RegExp, Array, Arguments'
    },
    {
        id: 5,
        question: 'Что такое autoboxing',
        answer: 'У некоторых примитовов есть объекты-обертки String, Number, Boolean - в которых содержаться методы и свойства. При необходимости (например при "Hello".length) - создается объект-обертка в который помещается наш примитив - вызывается необходимый метод/свойство - объект удаляется. Эти объекты используются для внутреней работы, не стоит их использовать напрямую'
    },
    {
        id: 6,
        question: 'Можно ли добавлять свойство примитивам',
        answer: 'Нет'
    },
    {
        id: 7,
        question: 'Как приобразовать примитив в объект',
        answer: 'new String("Hello"), new Number(5), new Boolean(false) - с логическими переменными нужно быть особенно осторожно, так как объект всегда ture, поэтому Boolean(false) == true'
    },
    {
        id: 8,
        question: 'Передача по значению или по ссылке?',
        answer: 'Примитивы передаются по значению, если мы передаем примитивы в функцию как аргументы, на самом деле внутри функции создаются временные переменные с такими значениями, поэтому все действия внутри функции не будут оказывать влияние на значения снаружи. А вот объекты передаются по ссылке - поэтому их можно менять внутри функции (это относится и к массивам)'
    },
    {
        id: 9,
        question: 'Что означает this',
        answer: 'this- это объект-связка, который ссылается на контекст вызова функции. Или другими словами это ссылка которая указывает на объект, в контексте которого выполняется функция. this не ссылается ни на какой объет до тех пор, пока не вызвана функция. \n 1.func() - this=windows \n 2. obj.func() - this = obj \n 3. func.apply(obj) или call(obj) - this = obj \n 4. new User() - this = новый объект User'
    },
    {
        id: 10,
        question: 'В каких случаях нужно осторожно работать с this',
        answer: '1. При использовании метода в качестве функции обратного вызова \n 2. При замыкании \n 3. При присвоеннии метода \n 4. При Заимствовании метода \n 5. если функцию возвращают как результат \n 6. Передается как аргумент'
    },
    {
        id: 11,
        question: 'Приведение к boolean',
        answer: 'var foo = new Boolean(bar); \n var foo = !!bar \n Ложные значения которые приводятся к false: \n 1. null и undefined \n 2. 0, -0, NaN \n 3. Пустая строка \n Все остатьное true'
    },
    {
        id: 12,
        question: 'JavaScript, главные 4 характеристики',
        answer: ''
    },
];

export default jsCore;
/* tslint:enable:max-line-length */